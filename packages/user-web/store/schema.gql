schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

input AddMenuIntoCartInput {
  cartId: uuid!
  menuId: uuid!
  quantity: Int!
}

type AddMenuIntoCartOutput {
  success: Boolean!
}

"""
columns and relationships of "cart"
"""
type cart {
  """An array relationship"""
  cartItems(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): [cartItem!]!

  """An aggregate relationship"""
  cartItems_aggregate(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): cartItem_aggregate!
  createdTime: timestamptz
  creatorId: String!
  id: uuid!
  name: String!
  updatedTime: timestamptz

  """An object relationship"""
  user: user!

  """An array relationship"""
  userCarts(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): [userCart!]!

  """An aggregate relationship"""
  userCarts_aggregate(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): userCart_aggregate!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!
}

"""
aggregated selection of "cart"
"""
type cart_aggregate {
  aggregate: cart_aggregate_fields
  nodes: [cart!]!
}

input cart_aggregate_bool_exp {
  count: cart_aggregate_bool_exp_count
}

input cart_aggregate_bool_exp_count {
  arguments: [cart_select_column!]
  distinct: Boolean
  filter: cart_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "cart"
"""
type cart_aggregate_fields {
  count(columns: [cart_select_column!], distinct: Boolean): Int!
  max: cart_max_fields
  min: cart_min_fields
}

"""
order by aggregate values of table "cart"
"""
input cart_aggregate_order_by {
  count: order_by
  max: cart_max_order_by
  min: cart_min_order_by
}

"""
input type for inserting array relation for remote table "cart"
"""
input cart_arr_rel_insert_input {
  data: [cart_insert_input!]!

  """upsert condition"""
  on_conflict: cart_on_conflict
}

"""
Boolean expression to filter rows from the table "cart". All fields are combined with a logical 'AND'.
"""
input cart_bool_exp {
  _and: [cart_bool_exp!]
  _not: cart_bool_exp
  _or: [cart_bool_exp!]
  cartItems: cartItem_bool_exp
  cartItems_aggregate: cartItem_aggregate_bool_exp
  createdTime: timestamptz_comparison_exp
  creatorId: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updatedTime: timestamptz_comparison_exp
  user: user_bool_exp
  userCarts: userCart_bool_exp
  userCarts_aggregate: userCart_aggregate_bool_exp
  users: user_bool_exp
  users_aggregate: user_aggregate_bool_exp
}

"""
unique or primary key constraints on table "cart"
"""
enum cart_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  cart_name_key

  """
  unique or primary key constraint on columns "id"
  """
  cart_pkey
}

"""
input type for inserting data into table "cart"
"""
input cart_insert_input {
  cartItems: cartItem_arr_rel_insert_input
  createdTime: timestamptz
  creatorId: String
  id: uuid
  name: String
  updatedTime: timestamptz
  user: user_obj_rel_insert_input
  userCarts: userCart_arr_rel_insert_input
  users: user_arr_rel_insert_input
}

"""aggregate max on columns"""
type cart_max_fields {
  createdTime: timestamptz
  creatorId: String
  id: uuid
  name: String
  updatedTime: timestamptz
}

"""
order by max() on columns of table "cart"
"""
input cart_max_order_by {
  createdTime: order_by
  creatorId: order_by
  id: order_by
  name: order_by
  updatedTime: order_by
}

"""aggregate min on columns"""
type cart_min_fields {
  createdTime: timestamptz
  creatorId: String
  id: uuid
  name: String
  updatedTime: timestamptz
}

"""
order by min() on columns of table "cart"
"""
input cart_min_order_by {
  createdTime: order_by
  creatorId: order_by
  id: order_by
  name: order_by
  updatedTime: order_by
}

"""
response of any mutation on the table "cart"
"""
type cart_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cart!]!
}

"""
input type for inserting object relation for remote table "cart"
"""
input cart_obj_rel_insert_input {
  data: cart_insert_input!

  """upsert condition"""
  on_conflict: cart_on_conflict
}

"""
on_conflict condition type for table "cart"
"""
input cart_on_conflict {
  constraint: cart_constraint!
  update_columns: [cart_update_column!]! = []
  where: cart_bool_exp
}

"""Ordering options when selecting data from "cart"."""
input cart_order_by {
  cartItems_aggregate: cartItem_aggregate_order_by
  createdTime: order_by
  creatorId: order_by
  id: order_by
  name: order_by
  updatedTime: order_by
  user: user_order_by
  userCarts_aggregate: userCart_aggregate_order_by
  users_aggregate: user_aggregate_order_by
}

"""primary key columns input for table: cart"""
input cart_pk_columns_input {
  id: uuid!
}

"""
select columns of table "cart"
"""
enum cart_select_column {
  """column name"""
  createdTime

  """column name"""
  creatorId

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedTime
}

"""
input type for updating data in table "cart"
"""
input cart_set_input {
  createdTime: timestamptz
  creatorId: String
  id: uuid
  name: String
  updatedTime: timestamptz
}

"""
Streaming cursor of the table "cart"
"""
input cart_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: cart_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input cart_stream_cursor_value_input {
  createdTime: timestamptz
  creatorId: String
  id: uuid
  name: String
  updatedTime: timestamptz
}

"""
update columns of table "cart"
"""
enum cart_update_column {
  """column name"""
  createdTime

  """column name"""
  creatorId

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedTime
}

input cart_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: cart_set_input

  """filter the rows which have to be updated"""
  where: cart_bool_exp!
}

"""
columns and relationships of "cartItem"
"""
type cartItem {
  addedUserId: String!

  """An object relationship"""
  cart: cart!
  cartId: uuid!
  created_at: timestamptz
  id: uuid!

  """An object relationship"""
  menu: menu!
  menuId: uuid!
  quantity: Int!
  updated_at: timestamptz

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "cartItem"
"""
type cartItem_aggregate {
  aggregate: cartItem_aggregate_fields
  nodes: [cartItem!]!
}

input cartItem_aggregate_bool_exp {
  count: cartItem_aggregate_bool_exp_count
}

input cartItem_aggregate_bool_exp_count {
  arguments: [cartItem_select_column!]
  distinct: Boolean
  filter: cartItem_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "cartItem"
"""
type cartItem_aggregate_fields {
  avg: cartItem_avg_fields
  count(columns: [cartItem_select_column!], distinct: Boolean): Int!
  max: cartItem_max_fields
  min: cartItem_min_fields
  stddev: cartItem_stddev_fields
  stddev_pop: cartItem_stddev_pop_fields
  stddev_samp: cartItem_stddev_samp_fields
  sum: cartItem_sum_fields
  var_pop: cartItem_var_pop_fields
  var_samp: cartItem_var_samp_fields
  variance: cartItem_variance_fields
}

"""
order by aggregate values of table "cartItem"
"""
input cartItem_aggregate_order_by {
  avg: cartItem_avg_order_by
  count: order_by
  max: cartItem_max_order_by
  min: cartItem_min_order_by
  stddev: cartItem_stddev_order_by
  stddev_pop: cartItem_stddev_pop_order_by
  stddev_samp: cartItem_stddev_samp_order_by
  sum: cartItem_sum_order_by
  var_pop: cartItem_var_pop_order_by
  var_samp: cartItem_var_samp_order_by
  variance: cartItem_variance_order_by
}

"""
input type for inserting array relation for remote table "cartItem"
"""
input cartItem_arr_rel_insert_input {
  data: [cartItem_insert_input!]!

  """upsert condition"""
  on_conflict: cartItem_on_conflict
}

"""aggregate avg on columns"""
type cartItem_avg_fields {
  quantity: Float
}

"""
order by avg() on columns of table "cartItem"
"""
input cartItem_avg_order_by {
  quantity: order_by
}

"""
Boolean expression to filter rows from the table "cartItem". All fields are combined with a logical 'AND'.
"""
input cartItem_bool_exp {
  _and: [cartItem_bool_exp!]
  _not: cartItem_bool_exp
  _or: [cartItem_bool_exp!]
  addedUserId: String_comparison_exp
  cart: cart_bool_exp
  cartId: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  menu: menu_bool_exp
  menuId: uuid_comparison_exp
  quantity: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""
unique or primary key constraints on table "cartItem"
"""
enum cartItem_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  cartItem_pkey
}

"""
input type for incrementing numeric columns in table "cartItem"
"""
input cartItem_inc_input {
  quantity: Int
}

"""
input type for inserting data into table "cartItem"
"""
input cartItem_insert_input {
  addedUserId: String
  cart: cart_obj_rel_insert_input
  cartId: uuid
  created_at: timestamptz
  id: uuid
  menu: menu_obj_rel_insert_input
  menuId: uuid
  quantity: Int
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type cartItem_max_fields {
  addedUserId: String
  cartId: uuid
  created_at: timestamptz
  id: uuid
  menuId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "cartItem"
"""
input cartItem_max_order_by {
  addedUserId: order_by
  cartId: order_by
  created_at: order_by
  id: order_by
  menuId: order_by
  quantity: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type cartItem_min_fields {
  addedUserId: String
  cartId: uuid
  created_at: timestamptz
  id: uuid
  menuId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "cartItem"
"""
input cartItem_min_order_by {
  addedUserId: order_by
  cartId: order_by
  created_at: order_by
  id: order_by
  menuId: order_by
  quantity: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "cartItem"
"""
type cartItem_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cartItem!]!
}

"""
on_conflict condition type for table "cartItem"
"""
input cartItem_on_conflict {
  constraint: cartItem_constraint!
  update_columns: [cartItem_update_column!]! = []
  where: cartItem_bool_exp
}

"""Ordering options when selecting data from "cartItem"."""
input cartItem_order_by {
  addedUserId: order_by
  cart: cart_order_by
  cartId: order_by
  created_at: order_by
  id: order_by
  menu: menu_order_by
  menuId: order_by
  quantity: order_by
  updated_at: order_by
  user: user_order_by
}

"""primary key columns input for table: cartItem"""
input cartItem_pk_columns_input {
  id: uuid!
}

"""
select columns of table "cartItem"
"""
enum cartItem_select_column {
  """column name"""
  addedUserId

  """column name"""
  cartId

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  menuId

  """column name"""
  quantity

  """column name"""
  updated_at
}

"""
input type for updating data in table "cartItem"
"""
input cartItem_set_input {
  addedUserId: String
  cartId: uuid
  created_at: timestamptz
  id: uuid
  menuId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type cartItem_stddev_fields {
  quantity: Float
}

"""
order by stddev() on columns of table "cartItem"
"""
input cartItem_stddev_order_by {
  quantity: order_by
}

"""aggregate stddev_pop on columns"""
type cartItem_stddev_pop_fields {
  quantity: Float
}

"""
order by stddev_pop() on columns of table "cartItem"
"""
input cartItem_stddev_pop_order_by {
  quantity: order_by
}

"""aggregate stddev_samp on columns"""
type cartItem_stddev_samp_fields {
  quantity: Float
}

"""
order by stddev_samp() on columns of table "cartItem"
"""
input cartItem_stddev_samp_order_by {
  quantity: order_by
}

"""
Streaming cursor of the table "cartItem"
"""
input cartItem_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: cartItem_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input cartItem_stream_cursor_value_input {
  addedUserId: String
  cartId: uuid
  created_at: timestamptz
  id: uuid
  menuId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type cartItem_sum_fields {
  quantity: Int
}

"""
order by sum() on columns of table "cartItem"
"""
input cartItem_sum_order_by {
  quantity: order_by
}

"""
update columns of table "cartItem"
"""
enum cartItem_update_column {
  """column name"""
  addedUserId

  """column name"""
  cartId

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  menuId

  """column name"""
  quantity

  """column name"""
  updated_at
}

input cartItem_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: cartItem_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: cartItem_set_input

  """filter the rows which have to be updated"""
  where: cartItem_bool_exp!
}

"""aggregate var_pop on columns"""
type cartItem_var_pop_fields {
  quantity: Float
}

"""
order by var_pop() on columns of table "cartItem"
"""
input cartItem_var_pop_order_by {
  quantity: order_by
}

"""aggregate var_samp on columns"""
type cartItem_var_samp_fields {
  quantity: Float
}

"""
order by var_samp() on columns of table "cartItem"
"""
input cartItem_var_samp_order_by {
  quantity: order_by
}

"""aggregate variance on columns"""
type cartItem_variance_fields {
  quantity: Float
}

"""
order by variance() on columns of table "cartItem"
"""
input cartItem_variance_order_by {
  quantity: order_by
}

"""
columns and relationships of "category"
"""
type category {
  id: uuid!

  """An array relationship"""
  menus(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """An aggregate relationship"""
  menus_aggregate(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): menu_aggregate!
  name: String!
}

"""
aggregated selection of "category"
"""
type category_aggregate {
  aggregate: category_aggregate_fields
  nodes: [category!]!
}

"""
aggregate fields of "category"
"""
type category_aggregate_fields {
  count(columns: [category_select_column!], distinct: Boolean): Int!
  max: category_max_fields
  min: category_min_fields
}

"""
Boolean expression to filter rows from the table "category". All fields are combined with a logical 'AND'.
"""
input category_bool_exp {
  _and: [category_bool_exp!]
  _not: category_bool_exp
  _or: [category_bool_exp!]
  id: uuid_comparison_exp
  menus: menu_bool_exp
  menus_aggregate: menu_aggregate_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "category"
"""
enum category_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  category_pkey
}

"""
input type for inserting data into table "category"
"""
input category_insert_input {
  id: uuid
  menus: menu_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type category_max_fields {
  id: uuid
  name: String
}

"""aggregate min on columns"""
type category_min_fields {
  id: uuid
  name: String
}

"""
response of any mutation on the table "category"
"""
type category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [category!]!
}

"""
input type for inserting object relation for remote table "category"
"""
input category_obj_rel_insert_input {
  data: category_insert_input!

  """upsert condition"""
  on_conflict: category_on_conflict
}

"""
on_conflict condition type for table "category"
"""
input category_on_conflict {
  constraint: category_constraint!
  update_columns: [category_update_column!]! = []
  where: category_bool_exp
}

"""Ordering options when selecting data from "category"."""
input category_order_by {
  id: order_by
  menus_aggregate: menu_aggregate_order_by
  name: order_by
}

"""primary key columns input for table: category"""
input category_pk_columns_input {
  id: uuid!
}

"""
select columns of table "category"
"""
enum category_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "category"
"""
input category_set_input {
  id: uuid
  name: String
}

"""
Streaming cursor of the table "category"
"""
input category_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: category_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input category_stream_cursor_value_input {
  id: uuid
  name: String
}

"""
update columns of table "category"
"""
enum category_update_column {
  """column name"""
  id

  """column name"""
  name
}

input category_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: category_set_input

  """filter the rows which have to be updated"""
  where: category_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "menu"
"""
type menu {
  """An array relationship"""
  cartItems(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): [cartItem!]!

  """An aggregate relationship"""
  cartItems_aggregate(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): cartItem_aggregate!

  """An object relationship"""
  category: category!
  categoryId: uuid!
  id: uuid!
  image: String!
  name: String!

  """An array relationship"""
  orderItems(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): [orderItem!]!

  """An aggregate relationship"""
  orderItems_aggregate(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): orderItem_aggregate!
  price: Int!
}

"""
aggregated selection of "menu"
"""
type menu_aggregate {
  aggregate: menu_aggregate_fields
  nodes: [menu!]!
}

input menu_aggregate_bool_exp {
  count: menu_aggregate_bool_exp_count
}

input menu_aggregate_bool_exp_count {
  arguments: [menu_select_column!]
  distinct: Boolean
  filter: menu_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "menu"
"""
type menu_aggregate_fields {
  avg: menu_avg_fields
  count(columns: [menu_select_column!], distinct: Boolean): Int!
  max: menu_max_fields
  min: menu_min_fields
  stddev: menu_stddev_fields
  stddev_pop: menu_stddev_pop_fields
  stddev_samp: menu_stddev_samp_fields
  sum: menu_sum_fields
  var_pop: menu_var_pop_fields
  var_samp: menu_var_samp_fields
  variance: menu_variance_fields
}

"""
order by aggregate values of table "menu"
"""
input menu_aggregate_order_by {
  avg: menu_avg_order_by
  count: order_by
  max: menu_max_order_by
  min: menu_min_order_by
  stddev: menu_stddev_order_by
  stddev_pop: menu_stddev_pop_order_by
  stddev_samp: menu_stddev_samp_order_by
  sum: menu_sum_order_by
  var_pop: menu_var_pop_order_by
  var_samp: menu_var_samp_order_by
  variance: menu_variance_order_by
}

"""
input type for inserting array relation for remote table "menu"
"""
input menu_arr_rel_insert_input {
  data: [menu_insert_input!]!

  """upsert condition"""
  on_conflict: menu_on_conflict
}

"""aggregate avg on columns"""
type menu_avg_fields {
  price: Float
}

"""
order by avg() on columns of table "menu"
"""
input menu_avg_order_by {
  price: order_by
}

"""
Boolean expression to filter rows from the table "menu". All fields are combined with a logical 'AND'.
"""
input menu_bool_exp {
  _and: [menu_bool_exp!]
  _not: menu_bool_exp
  _or: [menu_bool_exp!]
  cartItems: cartItem_bool_exp
  cartItems_aggregate: cartItem_aggregate_bool_exp
  category: category_bool_exp
  categoryId: uuid_comparison_exp
  id: uuid_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  orderItems: orderItem_bool_exp
  orderItems_aggregate: orderItem_aggregate_bool_exp
  price: Int_comparison_exp
}

"""
unique or primary key constraints on table "menu"
"""
enum menu_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  menu_pkey
}

"""
input type for incrementing numeric columns in table "menu"
"""
input menu_inc_input {
  price: Int
}

"""
input type for inserting data into table "menu"
"""
input menu_insert_input {
  cartItems: cartItem_arr_rel_insert_input
  category: category_obj_rel_insert_input
  categoryId: uuid
  id: uuid
  image: String
  name: String
  orderItems: orderItem_arr_rel_insert_input
  price: Int
}

"""aggregate max on columns"""
type menu_max_fields {
  categoryId: uuid
  id: uuid
  image: String
  name: String
  price: Int
}

"""
order by max() on columns of table "menu"
"""
input menu_max_order_by {
  categoryId: order_by
  id: order_by
  image: order_by
  name: order_by
  price: order_by
}

"""aggregate min on columns"""
type menu_min_fields {
  categoryId: uuid
  id: uuid
  image: String
  name: String
  price: Int
}

"""
order by min() on columns of table "menu"
"""
input menu_min_order_by {
  categoryId: order_by
  id: order_by
  image: order_by
  name: order_by
  price: order_by
}

"""
response of any mutation on the table "menu"
"""
type menu_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [menu!]!
}

"""
input type for inserting object relation for remote table "menu"
"""
input menu_obj_rel_insert_input {
  data: menu_insert_input!

  """upsert condition"""
  on_conflict: menu_on_conflict
}

"""
on_conflict condition type for table "menu"
"""
input menu_on_conflict {
  constraint: menu_constraint!
  update_columns: [menu_update_column!]! = []
  where: menu_bool_exp
}

"""Ordering options when selecting data from "menu"."""
input menu_order_by {
  cartItems_aggregate: cartItem_aggregate_order_by
  category: category_order_by
  categoryId: order_by
  id: order_by
  image: order_by
  name: order_by
  orderItems_aggregate: orderItem_aggregate_order_by
  price: order_by
}

"""primary key columns input for table: menu"""
input menu_pk_columns_input {
  id: uuid!
}

"""
select columns of table "menu"
"""
enum menu_select_column {
  """column name"""
  categoryId

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  price
}

"""
input type for updating data in table "menu"
"""
input menu_set_input {
  categoryId: uuid
  id: uuid
  image: String
  name: String
  price: Int
}

"""aggregate stddev on columns"""
type menu_stddev_fields {
  price: Float
}

"""
order by stddev() on columns of table "menu"
"""
input menu_stddev_order_by {
  price: order_by
}

"""aggregate stddev_pop on columns"""
type menu_stddev_pop_fields {
  price: Float
}

"""
order by stddev_pop() on columns of table "menu"
"""
input menu_stddev_pop_order_by {
  price: order_by
}

"""aggregate stddev_samp on columns"""
type menu_stddev_samp_fields {
  price: Float
}

"""
order by stddev_samp() on columns of table "menu"
"""
input menu_stddev_samp_order_by {
  price: order_by
}

"""
Streaming cursor of the table "menu"
"""
input menu_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: menu_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input menu_stream_cursor_value_input {
  categoryId: uuid
  id: uuid
  image: String
  name: String
  price: Int
}

"""aggregate sum on columns"""
type menu_sum_fields {
  price: Int
}

"""
order by sum() on columns of table "menu"
"""
input menu_sum_order_by {
  price: order_by
}

"""
update columns of table "menu"
"""
enum menu_update_column {
  """column name"""
  categoryId

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  price
}

input menu_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: menu_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: menu_set_input

  """filter the rows which have to be updated"""
  where: menu_bool_exp!
}

"""aggregate var_pop on columns"""
type menu_var_pop_fields {
  price: Float
}

"""
order by var_pop() on columns of table "menu"
"""
input menu_var_pop_order_by {
  price: order_by
}

"""aggregate var_samp on columns"""
type menu_var_samp_fields {
  price: Float
}

"""
order by var_samp() on columns of table "menu"
"""
input menu_var_samp_order_by {
  price: order_by
}

"""aggregate variance on columns"""
type menu_variance_fields {
  price: Float
}

"""
order by variance() on columns of table "menu"
"""
input menu_variance_order_by {
  price: order_by
}

"""mutation root"""
type mutation_root {
  addMenuIntoCart(input: AddMenuIntoCartInput!): AddMenuIntoCartOutput

  """
  delete data from the table: "cart"
  """
  delete_cart(
    """filter the rows which have to be deleted"""
    where: cart_bool_exp!
  ): cart_mutation_response

  """
  delete data from the table: "cartItem"
  """
  delete_cartItem(
    """filter the rows which have to be deleted"""
    where: cartItem_bool_exp!
  ): cartItem_mutation_response

  """
  delete single row from the table: "cartItem"
  """
  delete_cartItem_by_pk(id: uuid!): cartItem

  """
  delete single row from the table: "cart"
  """
  delete_cart_by_pk(id: uuid!): cart

  """
  delete data from the table: "category"
  """
  delete_category(
    """filter the rows which have to be deleted"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  delete single row from the table: "category"
  """
  delete_category_by_pk(id: uuid!): category

  """
  delete data from the table: "menu"
  """
  delete_menu(
    """filter the rows which have to be deleted"""
    where: menu_bool_exp!
  ): menu_mutation_response

  """
  delete single row from the table: "menu"
  """
  delete_menu_by_pk(id: uuid!): menu

  """
  delete data from the table: "order"
  """
  delete_order(
    """filter the rows which have to be deleted"""
    where: order_bool_exp!
  ): order_mutation_response

  """
  delete data from the table: "orderItem"
  """
  delete_orderItem(
    """filter the rows which have to be deleted"""
    where: orderItem_bool_exp!
  ): orderItem_mutation_response

  """
  delete single row from the table: "orderItem"
  """
  delete_orderItem_by_pk(id: uuid!): orderItem

  """
  delete single row from the table: "order"
  """
  delete_order_by_pk(id: uuid!): order

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete data from the table: "userCart"
  """
  delete_userCart(
    """filter the rows which have to be deleted"""
    where: userCart_bool_exp!
  ): userCart_mutation_response

  """
  delete single row from the table: "userCart"
  """
  delete_userCart_by_pk(id: uuid!): userCart

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: String!): user

  """
  insert data into the table: "cart"
  """
  insert_cart(
    """the rows to be inserted"""
    objects: [cart_insert_input!]!

    """upsert condition"""
    on_conflict: cart_on_conflict
  ): cart_mutation_response

  """
  insert data into the table: "cartItem"
  """
  insert_cartItem(
    """the rows to be inserted"""
    objects: [cartItem_insert_input!]!

    """upsert condition"""
    on_conflict: cartItem_on_conflict
  ): cartItem_mutation_response

  """
  insert a single row into the table: "cartItem"
  """
  insert_cartItem_one(
    """the row to be inserted"""
    object: cartItem_insert_input!

    """upsert condition"""
    on_conflict: cartItem_on_conflict
  ): cartItem

  """
  insert a single row into the table: "cart"
  """
  insert_cart_one(
    """the row to be inserted"""
    object: cart_insert_input!

    """upsert condition"""
    on_conflict: cart_on_conflict
  ): cart

  """
  insert data into the table: "category"
  """
  insert_category(
    """the rows to be inserted"""
    objects: [category_insert_input!]!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category_mutation_response

  """
  insert a single row into the table: "category"
  """
  insert_category_one(
    """the row to be inserted"""
    object: category_insert_input!

    """upsert condition"""
    on_conflict: category_on_conflict
  ): category

  """
  insert data into the table: "menu"
  """
  insert_menu(
    """the rows to be inserted"""
    objects: [menu_insert_input!]!

    """upsert condition"""
    on_conflict: menu_on_conflict
  ): menu_mutation_response

  """
  insert a single row into the table: "menu"
  """
  insert_menu_one(
    """the row to be inserted"""
    object: menu_insert_input!

    """upsert condition"""
    on_conflict: menu_on_conflict
  ): menu

  """
  insert data into the table: "order"
  """
  insert_order(
    """the rows to be inserted"""
    objects: [order_insert_input!]!

    """upsert condition"""
    on_conflict: order_on_conflict
  ): order_mutation_response

  """
  insert data into the table: "orderItem"
  """
  insert_orderItem(
    """the rows to be inserted"""
    objects: [orderItem_insert_input!]!

    """upsert condition"""
    on_conflict: orderItem_on_conflict
  ): orderItem_mutation_response

  """
  insert a single row into the table: "orderItem"
  """
  insert_orderItem_one(
    """the row to be inserted"""
    object: orderItem_insert_input!

    """upsert condition"""
    on_conflict: orderItem_on_conflict
  ): orderItem

  """
  insert a single row into the table: "order"
  """
  insert_order_one(
    """the row to be inserted"""
    object: order_insert_input!

    """upsert condition"""
    on_conflict: order_on_conflict
  ): order

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert data into the table: "userCart"
  """
  insert_userCart(
    """the rows to be inserted"""
    objects: [userCart_insert_input!]!

    """upsert condition"""
    on_conflict: userCart_on_conflict
  ): userCart_mutation_response

  """
  insert a single row into the table: "userCart"
  """
  insert_userCart_one(
    """the row to be inserted"""
    object: userCart_insert_input!

    """upsert condition"""
    on_conflict: userCart_on_conflict
  ): userCart

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user
  orderCartItems(input: OrderCartItemsInput!): OrderCartItemsOutput
  removeMenuFromCart(input: RemoveMenuFromCartInput!): RemoveMenuFromCartOutput
  signIn(input: SignInInput!): SignInOutput
  signUp(input: SignUpInput!): SignUpOutput

  """
  update data of the table: "cart"
  """
  update_cart(
    """sets the columns of the filtered rows to the given values"""
    _set: cart_set_input

    """filter the rows which have to be updated"""
    where: cart_bool_exp!
  ): cart_mutation_response

  """
  update data of the table: "cartItem"
  """
  update_cartItem(
    """increments the numeric columns with given value of the filtered values"""
    _inc: cartItem_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cartItem_set_input

    """filter the rows which have to be updated"""
    where: cartItem_bool_exp!
  ): cartItem_mutation_response

  """
  update single row of the table: "cartItem"
  """
  update_cartItem_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: cartItem_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cartItem_set_input
    pk_columns: cartItem_pk_columns_input!
  ): cartItem

  """
  update multiples rows of table: "cartItem"
  """
  update_cartItem_many(
    """updates to execute, in order"""
    updates: [cartItem_updates!]!
  ): [cartItem_mutation_response]

  """
  update single row of the table: "cart"
  """
  update_cart_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: cart_set_input
    pk_columns: cart_pk_columns_input!
  ): cart

  """
  update multiples rows of table: "cart"
  """
  update_cart_many(
    """updates to execute, in order"""
    updates: [cart_updates!]!
  ): [cart_mutation_response]

  """
  update data of the table: "category"
  """
  update_category(
    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input

    """filter the rows which have to be updated"""
    where: category_bool_exp!
  ): category_mutation_response

  """
  update single row of the table: "category"
  """
  update_category_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: category_set_input
    pk_columns: category_pk_columns_input!
  ): category

  """
  update multiples rows of table: "category"
  """
  update_category_many(
    """updates to execute, in order"""
    updates: [category_updates!]!
  ): [category_mutation_response]

  """
  update data of the table: "menu"
  """
  update_menu(
    """increments the numeric columns with given value of the filtered values"""
    _inc: menu_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: menu_set_input

    """filter the rows which have to be updated"""
    where: menu_bool_exp!
  ): menu_mutation_response

  """
  update single row of the table: "menu"
  """
  update_menu_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: menu_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: menu_set_input
    pk_columns: menu_pk_columns_input!
  ): menu

  """
  update multiples rows of table: "menu"
  """
  update_menu_many(
    """updates to execute, in order"""
    updates: [menu_updates!]!
  ): [menu_mutation_response]

  """
  update data of the table: "order"
  """
  update_order(
    """increments the numeric columns with given value of the filtered values"""
    _inc: order_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: order_set_input

    """filter the rows which have to be updated"""
    where: order_bool_exp!
  ): order_mutation_response

  """
  update data of the table: "orderItem"
  """
  update_orderItem(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orderItem_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orderItem_set_input

    """filter the rows which have to be updated"""
    where: orderItem_bool_exp!
  ): orderItem_mutation_response

  """
  update single row of the table: "orderItem"
  """
  update_orderItem_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orderItem_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orderItem_set_input
    pk_columns: orderItem_pk_columns_input!
  ): orderItem

  """
  update multiples rows of table: "orderItem"
  """
  update_orderItem_many(
    """updates to execute, in order"""
    updates: [orderItem_updates!]!
  ): [orderItem_mutation_response]

  """
  update single row of the table: "order"
  """
  update_order_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: order_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: order_set_input
    pk_columns: order_pk_columns_input!
  ): order

  """
  update multiples rows of table: "order"
  """
  update_order_many(
    """updates to execute, in order"""
    updates: [order_updates!]!
  ): [order_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update data of the table: "userCart"
  """
  update_userCart(
    """sets the columns of the filtered rows to the given values"""
    _set: userCart_set_input

    """filter the rows which have to be updated"""
    where: userCart_bool_exp!
  ): userCart_mutation_response

  """
  update single row of the table: "userCart"
  """
  update_userCart_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: userCart_set_input
    pk_columns: userCart_pk_columns_input!
  ): userCart

  """
  update multiples rows of table: "userCart"
  """
  update_userCart_many(
    """updates to execute, in order"""
    updates: [userCart_updates!]!
  ): [userCart_mutation_response]

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

"""
columns and relationships of "order"
"""
type order {
  id: uuid!

  """An array relationship"""
  orderItems(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): [orderItem!]!

  """An aggregate relationship"""
  orderItems_aggregate(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): orderItem_aggregate!
  orderedAt: timestamptz!
  orderedUserId: String!
  totalPrice: Int!
  updated_at: timestamptz

  """An object relationship"""
  user: user!
}

"""
aggregated selection of "order"
"""
type order_aggregate {
  aggregate: order_aggregate_fields
  nodes: [order!]!
}

input order_aggregate_bool_exp {
  count: order_aggregate_bool_exp_count
}

input order_aggregate_bool_exp_count {
  arguments: [order_select_column!]
  distinct: Boolean
  filter: order_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "order"
"""
type order_aggregate_fields {
  avg: order_avg_fields
  count(columns: [order_select_column!], distinct: Boolean): Int!
  max: order_max_fields
  min: order_min_fields
  stddev: order_stddev_fields
  stddev_pop: order_stddev_pop_fields
  stddev_samp: order_stddev_samp_fields
  sum: order_sum_fields
  var_pop: order_var_pop_fields
  var_samp: order_var_samp_fields
  variance: order_variance_fields
}

"""
order by aggregate values of table "order"
"""
input order_aggregate_order_by {
  avg: order_avg_order_by
  count: order_by
  max: order_max_order_by
  min: order_min_order_by
  stddev: order_stddev_order_by
  stddev_pop: order_stddev_pop_order_by
  stddev_samp: order_stddev_samp_order_by
  sum: order_sum_order_by
  var_pop: order_var_pop_order_by
  var_samp: order_var_samp_order_by
  variance: order_variance_order_by
}

"""
input type for inserting array relation for remote table "order"
"""
input order_arr_rel_insert_input {
  data: [order_insert_input!]!

  """upsert condition"""
  on_conflict: order_on_conflict
}

"""aggregate avg on columns"""
type order_avg_fields {
  totalPrice: Float
}

"""
order by avg() on columns of table "order"
"""
input order_avg_order_by {
  totalPrice: order_by
}

"""
Boolean expression to filter rows from the table "order". All fields are combined with a logical 'AND'.
"""
input order_bool_exp {
  _and: [order_bool_exp!]
  _not: order_bool_exp
  _or: [order_bool_exp!]
  id: uuid_comparison_exp
  orderItems: orderItem_bool_exp
  orderItems_aggregate: orderItem_aggregate_bool_exp
  orderedAt: timestamptz_comparison_exp
  orderedUserId: String_comparison_exp
  totalPrice: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
unique or primary key constraints on table "order"
"""
enum order_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  order_pkey
}

"""
input type for incrementing numeric columns in table "order"
"""
input order_inc_input {
  totalPrice: Int
}

"""
input type for inserting data into table "order"
"""
input order_insert_input {
  id: uuid
  orderItems: orderItem_arr_rel_insert_input
  orderedAt: timestamptz
  orderedUserId: String
  totalPrice: Int
  updated_at: timestamptz
  user: user_obj_rel_insert_input
}

"""aggregate max on columns"""
type order_max_fields {
  id: uuid
  orderedAt: timestamptz
  orderedUserId: String
  totalPrice: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "order"
"""
input order_max_order_by {
  id: order_by
  orderedAt: order_by
  orderedUserId: order_by
  totalPrice: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type order_min_fields {
  id: uuid
  orderedAt: timestamptz
  orderedUserId: String
  totalPrice: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "order"
"""
input order_min_order_by {
  id: order_by
  orderedAt: order_by
  orderedUserId: order_by
  totalPrice: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "order"
"""
type order_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [order!]!
}

"""
input type for inserting object relation for remote table "order"
"""
input order_obj_rel_insert_input {
  data: order_insert_input!

  """upsert condition"""
  on_conflict: order_on_conflict
}

"""
on_conflict condition type for table "order"
"""
input order_on_conflict {
  constraint: order_constraint!
  update_columns: [order_update_column!]! = []
  where: order_bool_exp
}

"""Ordering options when selecting data from "order"."""
input order_order_by {
  id: order_by
  orderItems_aggregate: orderItem_aggregate_order_by
  orderedAt: order_by
  orderedUserId: order_by
  totalPrice: order_by
  updated_at: order_by
  user: user_order_by
}

"""primary key columns input for table: order"""
input order_pk_columns_input {
  id: uuid!
}

"""
select columns of table "order"
"""
enum order_select_column {
  """column name"""
  id

  """column name"""
  orderedAt

  """column name"""
  orderedUserId

  """column name"""
  totalPrice

  """column name"""
  updated_at
}

"""
input type for updating data in table "order"
"""
input order_set_input {
  id: uuid
  orderedAt: timestamptz
  orderedUserId: String
  totalPrice: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type order_stddev_fields {
  totalPrice: Float
}

"""
order by stddev() on columns of table "order"
"""
input order_stddev_order_by {
  totalPrice: order_by
}

"""aggregate stddev_pop on columns"""
type order_stddev_pop_fields {
  totalPrice: Float
}

"""
order by stddev_pop() on columns of table "order"
"""
input order_stddev_pop_order_by {
  totalPrice: order_by
}

"""aggregate stddev_samp on columns"""
type order_stddev_samp_fields {
  totalPrice: Float
}

"""
order by stddev_samp() on columns of table "order"
"""
input order_stddev_samp_order_by {
  totalPrice: order_by
}

"""
Streaming cursor of the table "order"
"""
input order_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: order_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input order_stream_cursor_value_input {
  id: uuid
  orderedAt: timestamptz
  orderedUserId: String
  totalPrice: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type order_sum_fields {
  totalPrice: Int
}

"""
order by sum() on columns of table "order"
"""
input order_sum_order_by {
  totalPrice: order_by
}

"""
update columns of table "order"
"""
enum order_update_column {
  """column name"""
  id

  """column name"""
  orderedAt

  """column name"""
  orderedUserId

  """column name"""
  totalPrice

  """column name"""
  updated_at
}

input order_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: order_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: order_set_input

  """filter the rows which have to be updated"""
  where: order_bool_exp!
}

"""aggregate var_pop on columns"""
type order_var_pop_fields {
  totalPrice: Float
}

"""
order by var_pop() on columns of table "order"
"""
input order_var_pop_order_by {
  totalPrice: order_by
}

"""aggregate var_samp on columns"""
type order_var_samp_fields {
  totalPrice: Float
}

"""
order by var_samp() on columns of table "order"
"""
input order_var_samp_order_by {
  totalPrice: order_by
}

"""aggregate variance on columns"""
type order_variance_fields {
  totalPrice: Float
}

"""
order by variance() on columns of table "order"
"""
input order_variance_order_by {
  totalPrice: order_by
}

input OrderCartItemsInput {
  cartId: uuid!
}

type OrderCartItemsOutput {
  success: Boolean!
}

"""
columns and relationships of "orderItem"
"""
type orderItem {
  created_at: timestamptz!
  id: uuid!

  """An object relationship"""
  menu: menu!
  menuId: uuid!

  """An object relationship"""
  order: order!
  orderId: uuid!
  quantity: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "orderItem"
"""
type orderItem_aggregate {
  aggregate: orderItem_aggregate_fields
  nodes: [orderItem!]!
}

input orderItem_aggregate_bool_exp {
  count: orderItem_aggregate_bool_exp_count
}

input orderItem_aggregate_bool_exp_count {
  arguments: [orderItem_select_column!]
  distinct: Boolean
  filter: orderItem_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "orderItem"
"""
type orderItem_aggregate_fields {
  avg: orderItem_avg_fields
  count(columns: [orderItem_select_column!], distinct: Boolean): Int!
  max: orderItem_max_fields
  min: orderItem_min_fields
  stddev: orderItem_stddev_fields
  stddev_pop: orderItem_stddev_pop_fields
  stddev_samp: orderItem_stddev_samp_fields
  sum: orderItem_sum_fields
  var_pop: orderItem_var_pop_fields
  var_samp: orderItem_var_samp_fields
  variance: orderItem_variance_fields
}

"""
order by aggregate values of table "orderItem"
"""
input orderItem_aggregate_order_by {
  avg: orderItem_avg_order_by
  count: order_by
  max: orderItem_max_order_by
  min: orderItem_min_order_by
  stddev: orderItem_stddev_order_by
  stddev_pop: orderItem_stddev_pop_order_by
  stddev_samp: orderItem_stddev_samp_order_by
  sum: orderItem_sum_order_by
  var_pop: orderItem_var_pop_order_by
  var_samp: orderItem_var_samp_order_by
  variance: orderItem_variance_order_by
}

"""
input type for inserting array relation for remote table "orderItem"
"""
input orderItem_arr_rel_insert_input {
  data: [orderItem_insert_input!]!

  """upsert condition"""
  on_conflict: orderItem_on_conflict
}

"""aggregate avg on columns"""
type orderItem_avg_fields {
  quantity: Float
}

"""
order by avg() on columns of table "orderItem"
"""
input orderItem_avg_order_by {
  quantity: order_by
}

"""
Boolean expression to filter rows from the table "orderItem". All fields are combined with a logical 'AND'.
"""
input orderItem_bool_exp {
  _and: [orderItem_bool_exp!]
  _not: orderItem_bool_exp
  _or: [orderItem_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  menu: menu_bool_exp
  menuId: uuid_comparison_exp
  order: order_bool_exp
  orderId: uuid_comparison_exp
  quantity: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "orderItem"
"""
enum orderItem_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  orderItem_pkey
}

"""
input type for incrementing numeric columns in table "orderItem"
"""
input orderItem_inc_input {
  quantity: Int
}

"""
input type for inserting data into table "orderItem"
"""
input orderItem_insert_input {
  created_at: timestamptz
  id: uuid
  menu: menu_obj_rel_insert_input
  menuId: uuid
  order: order_obj_rel_insert_input
  orderId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type orderItem_max_fields {
  created_at: timestamptz
  id: uuid
  menuId: uuid
  orderId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "orderItem"
"""
input orderItem_max_order_by {
  created_at: order_by
  id: order_by
  menuId: order_by
  orderId: order_by
  quantity: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type orderItem_min_fields {
  created_at: timestamptz
  id: uuid
  menuId: uuid
  orderId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "orderItem"
"""
input orderItem_min_order_by {
  created_at: order_by
  id: order_by
  menuId: order_by
  orderId: order_by
  quantity: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "orderItem"
"""
type orderItem_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orderItem!]!
}

"""
on_conflict condition type for table "orderItem"
"""
input orderItem_on_conflict {
  constraint: orderItem_constraint!
  update_columns: [orderItem_update_column!]! = []
  where: orderItem_bool_exp
}

"""Ordering options when selecting data from "orderItem"."""
input orderItem_order_by {
  created_at: order_by
  id: order_by
  menu: menu_order_by
  menuId: order_by
  order: order_order_by
  orderId: order_by
  quantity: order_by
  updated_at: order_by
}

"""primary key columns input for table: orderItem"""
input orderItem_pk_columns_input {
  id: uuid!
}

"""
select columns of table "orderItem"
"""
enum orderItem_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  menuId

  """column name"""
  orderId

  """column name"""
  quantity

  """column name"""
  updated_at
}

"""
input type for updating data in table "orderItem"
"""
input orderItem_set_input {
  created_at: timestamptz
  id: uuid
  menuId: uuid
  orderId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type orderItem_stddev_fields {
  quantity: Float
}

"""
order by stddev() on columns of table "orderItem"
"""
input orderItem_stddev_order_by {
  quantity: order_by
}

"""aggregate stddev_pop on columns"""
type orderItem_stddev_pop_fields {
  quantity: Float
}

"""
order by stddev_pop() on columns of table "orderItem"
"""
input orderItem_stddev_pop_order_by {
  quantity: order_by
}

"""aggregate stddev_samp on columns"""
type orderItem_stddev_samp_fields {
  quantity: Float
}

"""
order by stddev_samp() on columns of table "orderItem"
"""
input orderItem_stddev_samp_order_by {
  quantity: order_by
}

"""
Streaming cursor of the table "orderItem"
"""
input orderItem_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: orderItem_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input orderItem_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  menuId: uuid
  orderId: uuid
  quantity: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type orderItem_sum_fields {
  quantity: Int
}

"""
order by sum() on columns of table "orderItem"
"""
input orderItem_sum_order_by {
  quantity: order_by
}

"""
update columns of table "orderItem"
"""
enum orderItem_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  menuId

  """column name"""
  orderId

  """column name"""
  quantity

  """column name"""
  updated_at
}

input orderItem_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: orderItem_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: orderItem_set_input

  """filter the rows which have to be updated"""
  where: orderItem_bool_exp!
}

"""aggregate var_pop on columns"""
type orderItem_var_pop_fields {
  quantity: Float
}

"""
order by var_pop() on columns of table "orderItem"
"""
input orderItem_var_pop_order_by {
  quantity: order_by
}

"""aggregate var_samp on columns"""
type orderItem_var_samp_fields {
  quantity: Float
}

"""
order by var_samp() on columns of table "orderItem"
"""
input orderItem_var_samp_order_by {
  quantity: order_by
}

"""aggregate variance on columns"""
type orderItem_variance_fields {
  quantity: Float
}

"""
order by variance() on columns of table "orderItem"
"""
input orderItem_variance_order_by {
  quantity: order_by
}

type query_root {
  """
  fetch data from the table: "cart"
  """
  cart(
    """distinct select on columns"""
    distinct_on: [cart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cart_order_by!]

    """filter the rows returned"""
    where: cart_bool_exp
  ): [cart!]!

  """
  fetch data from the table: "cartItem"
  """
  cartItem(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): [cartItem!]!

  """
  fetch aggregated fields from the table: "cartItem"
  """
  cartItem_aggregate(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): cartItem_aggregate!

  """fetch data from the table: "cartItem" using primary key columns"""
  cartItem_by_pk(id: uuid!): cartItem

  """
  fetch aggregated fields from the table: "cart"
  """
  cart_aggregate(
    """distinct select on columns"""
    distinct_on: [cart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cart_order_by!]

    """filter the rows returned"""
    where: cart_bool_exp
  ): cart_aggregate!

  """fetch data from the table: "cart" using primary key columns"""
  cart_by_pk(id: uuid!): cart

  """
  fetch data from the table: "category"
  """
  category(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch aggregated fields from the table: "category"
  """
  category_aggregate(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): category_aggregate!

  """fetch data from the table: "category" using primary key columns"""
  category_by_pk(id: uuid!): category

  """
  fetch data from the table: "menu"
  """
  menu(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """
  fetch aggregated fields from the table: "menu"
  """
  menu_aggregate(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): menu_aggregate!

  """fetch data from the table: "menu" using primary key columns"""
  menu_by_pk(id: uuid!): menu

  """
  fetch data from the table: "order"
  """
  order(
    """distinct select on columns"""
    distinct_on: [order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_order_by!]

    """filter the rows returned"""
    where: order_bool_exp
  ): [order!]!

  """
  fetch data from the table: "orderItem"
  """
  orderItem(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): [orderItem!]!

  """
  fetch aggregated fields from the table: "orderItem"
  """
  orderItem_aggregate(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): orderItem_aggregate!

  """fetch data from the table: "orderItem" using primary key columns"""
  orderItem_by_pk(id: uuid!): orderItem

  """
  fetch aggregated fields from the table: "order"
  """
  order_aggregate(
    """distinct select on columns"""
    distinct_on: [order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_order_by!]

    """filter the rows returned"""
    where: order_bool_exp
  ): order_aggregate!

  """fetch data from the table: "order" using primary key columns"""
  order_by_pk(id: uuid!): order

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch data from the table: "userCart"
  """
  userCart(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): [userCart!]!

  """
  fetch aggregated fields from the table: "userCart"
  """
  userCart_aggregate(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): userCart_aggregate!

  """fetch data from the table: "userCart" using primary key columns"""
  userCart_by_pk(id: uuid!): userCart

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user
}

input RemoveMenuFromCartInput {
  cartId: uuid!
  menuId: uuid!
  quantity: Int!
}

type RemoveMenuFromCartOutput {
  success: Boolean!
}

input SignInInput {
  id: String!
  password: String!
}

type SignInOutput {
  id: String!
  token: String!
  usingCartId: uuid!
}

input SignUpInput {
  cartName: String!
  id: String!
  name: String!
  password: String!
}

type SignUpOutput {
  id: String!
  token: String!
  usingCartId: uuid!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "cart"
  """
  cart(
    """distinct select on columns"""
    distinct_on: [cart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cart_order_by!]

    """filter the rows returned"""
    where: cart_bool_exp
  ): [cart!]!

  """
  fetch data from the table: "cartItem"
  """
  cartItem(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): [cartItem!]!

  """
  fetch aggregated fields from the table: "cartItem"
  """
  cartItem_aggregate(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): cartItem_aggregate!

  """fetch data from the table: "cartItem" using primary key columns"""
  cartItem_by_pk(id: uuid!): cartItem

  """
  fetch data from the table in a streaming manner: "cartItem"
  """
  cartItem_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [cartItem_stream_cursor_input]!

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): [cartItem!]!

  """
  fetch aggregated fields from the table: "cart"
  """
  cart_aggregate(
    """distinct select on columns"""
    distinct_on: [cart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cart_order_by!]

    """filter the rows returned"""
    where: cart_bool_exp
  ): cart_aggregate!

  """fetch data from the table: "cart" using primary key columns"""
  cart_by_pk(id: uuid!): cart

  """
  fetch data from the table in a streaming manner: "cart"
  """
  cart_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [cart_stream_cursor_input]!

    """filter the rows returned"""
    where: cart_bool_exp
  ): [cart!]!

  """
  fetch data from the table: "category"
  """
  category(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch aggregated fields from the table: "category"
  """
  category_aggregate(
    """distinct select on columns"""
    distinct_on: [category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [category_order_by!]

    """filter the rows returned"""
    where: category_bool_exp
  ): category_aggregate!

  """fetch data from the table: "category" using primary key columns"""
  category_by_pk(id: uuid!): category

  """
  fetch data from the table in a streaming manner: "category"
  """
  category_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [category_stream_cursor_input]!

    """filter the rows returned"""
    where: category_bool_exp
  ): [category!]!

  """
  fetch data from the table: "menu"
  """
  menu(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """
  fetch aggregated fields from the table: "menu"
  """
  menu_aggregate(
    """distinct select on columns"""
    distinct_on: [menu_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [menu_order_by!]

    """filter the rows returned"""
    where: menu_bool_exp
  ): menu_aggregate!

  """fetch data from the table: "menu" using primary key columns"""
  menu_by_pk(id: uuid!): menu

  """
  fetch data from the table in a streaming manner: "menu"
  """
  menu_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [menu_stream_cursor_input]!

    """filter the rows returned"""
    where: menu_bool_exp
  ): [menu!]!

  """
  fetch data from the table: "order"
  """
  order(
    """distinct select on columns"""
    distinct_on: [order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_order_by!]

    """filter the rows returned"""
    where: order_bool_exp
  ): [order!]!

  """
  fetch data from the table: "orderItem"
  """
  orderItem(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): [orderItem!]!

  """
  fetch aggregated fields from the table: "orderItem"
  """
  orderItem_aggregate(
    """distinct select on columns"""
    distinct_on: [orderItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderItem_order_by!]

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): orderItem_aggregate!

  """fetch data from the table: "orderItem" using primary key columns"""
  orderItem_by_pk(id: uuid!): orderItem

  """
  fetch data from the table in a streaming manner: "orderItem"
  """
  orderItem_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [orderItem_stream_cursor_input]!

    """filter the rows returned"""
    where: orderItem_bool_exp
  ): [orderItem!]!

  """
  fetch aggregated fields from the table: "order"
  """
  order_aggregate(
    """distinct select on columns"""
    distinct_on: [order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_order_by!]

    """filter the rows returned"""
    where: order_bool_exp
  ): order_aggregate!

  """fetch data from the table: "order" using primary key columns"""
  order_by_pk(id: uuid!): order

  """
  fetch data from the table in a streaming manner: "order"
  """
  order_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [order_stream_cursor_input]!

    """filter the rows returned"""
    where: order_bool_exp
  ): [order!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch data from the table: "userCart"
  """
  userCart(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): [userCart!]!

  """
  fetch aggregated fields from the table: "userCart"
  """
  userCart_aggregate(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): userCart_aggregate!

  """fetch data from the table: "userCart" using primary key columns"""
  userCart_by_pk(id: uuid!): userCart

  """
  fetch data from the table in a streaming manner: "userCart"
  """
  userCart_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [userCart_stream_cursor_input]!

    """filter the rows returned"""
    where: userCart_bool_exp
  ): [userCart!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user"
"""
type user {
  """An object relationship"""
  cart: cart

  """An array relationship"""
  cartItems(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): [cartItem!]!

  """An aggregate relationship"""
  cartItems_aggregate(
    """distinct select on columns"""
    distinct_on: [cartItem_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartItem_order_by!]

    """filter the rows returned"""
    where: cartItem_bool_exp
  ): cartItem_aggregate!

  """An array relationship"""
  carts(
    """distinct select on columns"""
    distinct_on: [cart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cart_order_by!]

    """filter the rows returned"""
    where: cart_bool_exp
  ): [cart!]!

  """An aggregate relationship"""
  carts_aggregate(
    """distinct select on columns"""
    distinct_on: [cart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cart_order_by!]

    """filter the rows returned"""
    where: cart_bool_exp
  ): cart_aggregate!
  created_at: timestamptz
  id: String!
  name: String!

  """An array relationship"""
  orders(
    """distinct select on columns"""
    distinct_on: [order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_order_by!]

    """filter the rows returned"""
    where: order_bool_exp
  ): [order!]!

  """An aggregate relationship"""
  orders_aggregate(
    """distinct select on columns"""
    distinct_on: [order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_order_by!]

    """filter the rows returned"""
    where: order_bool_exp
  ): order_aggregate!
  password: String!
  updated_at: timestamptz

  """An array relationship"""
  userCarts(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): [userCart!]!

  """An aggregate relationship"""
  userCarts_aggregate(
    """distinct select on columns"""
    distinct_on: [userCart_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userCart_order_by!]

    """filter the rows returned"""
    where: userCart_bool_exp
  ): userCart_aggregate!
  usingCartId: uuid
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

input user_aggregate_bool_exp {
  count: user_aggregate_bool_exp_count
}

input user_aggregate_bool_exp_count {
  arguments: [user_select_column!]
  distinct: Boolean
  filter: user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
order by aggregate values of table "user"
"""
input user_aggregate_order_by {
  count: order_by
  max: user_max_order_by
  min: user_min_order_by
}

"""
input type for inserting array relation for remote table "user"
"""
input user_arr_rel_insert_input {
  data: [user_insert_input!]!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  cart: cart_bool_exp
  cartItems: cartItem_bool_exp
  cartItems_aggregate: cartItem_aggregate_bool_exp
  carts: cart_bool_exp
  carts_aggregate: cart_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  orders: order_bool_exp
  orders_aggregate: order_aggregate_bool_exp
  password: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  userCarts: userCart_bool_exp
  userCarts_aggregate: userCart_aggregate_bool_exp
  usingCartId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  cart: cart_obj_rel_insert_input
  cartItems: cartItem_arr_rel_insert_input
  carts: cart_arr_rel_insert_input
  created_at: timestamptz
  id: String
  name: String
  orders: order_arr_rel_insert_input
  password: String
  updated_at: timestamptz
  userCarts: userCart_arr_rel_insert_input
  usingCartId: uuid
}

"""aggregate max on columns"""
type user_max_fields {
  created_at: timestamptz
  id: String
  name: String
  password: String
  updated_at: timestamptz
  usingCartId: uuid
}

"""
order by max() on columns of table "user"
"""
input user_max_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  password: order_by
  updated_at: order_by
  usingCartId: order_by
}

"""aggregate min on columns"""
type user_min_fields {
  created_at: timestamptz
  id: String
  name: String
  password: String
  updated_at: timestamptz
  usingCartId: uuid
}

"""
order by min() on columns of table "user"
"""
input user_min_order_by {
  created_at: order_by
  id: order_by
  name: order_by
  password: order_by
  updated_at: order_by
  usingCartId: order_by
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  cart: cart_order_by
  cartItems_aggregate: cartItem_aggregate_order_by
  carts_aggregate: cart_aggregate_order_by
  created_at: order_by
  id: order_by
  name: order_by
  orders_aggregate: order_aggregate_order_by
  password: order_by
  updated_at: order_by
  userCarts_aggregate: userCart_aggregate_order_by
  usingCartId: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: String!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  updated_at

  """column name"""
  usingCartId
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  created_at: timestamptz
  id: String
  name: String
  password: String
  updated_at: timestamptz
  usingCartId: uuid
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  created_at: timestamptz
  id: String
  name: String
  password: String
  updated_at: timestamptz
  usingCartId: uuid
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  updated_at

  """column name"""
  usingCartId
}

input user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

"""
columns and relationships of "userCart"
"""
type userCart {
  """An object relationship"""
  cart: cart!
  cartId: uuid!
  created_at: timestamptz!
  id: uuid!
  updated_at: timestamptz

  """An object relationship"""
  user: user!
  userId: String!
}

"""
aggregated selection of "userCart"
"""
type userCart_aggregate {
  aggregate: userCart_aggregate_fields
  nodes: [userCart!]!
}

input userCart_aggregate_bool_exp {
  count: userCart_aggregate_bool_exp_count
}

input userCart_aggregate_bool_exp_count {
  arguments: [userCart_select_column!]
  distinct: Boolean
  filter: userCart_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "userCart"
"""
type userCart_aggregate_fields {
  count(columns: [userCart_select_column!], distinct: Boolean): Int!
  max: userCart_max_fields
  min: userCart_min_fields
}

"""
order by aggregate values of table "userCart"
"""
input userCart_aggregate_order_by {
  count: order_by
  max: userCart_max_order_by
  min: userCart_min_order_by
}

"""
input type for inserting array relation for remote table "userCart"
"""
input userCart_arr_rel_insert_input {
  data: [userCart_insert_input!]!

  """upsert condition"""
  on_conflict: userCart_on_conflict
}

"""
Boolean expression to filter rows from the table "userCart". All fields are combined with a logical 'AND'.
"""
input userCart_bool_exp {
  _and: [userCart_bool_exp!]
  _not: userCart_bool_exp
  _or: [userCart_bool_exp!]
  cart: cart_bool_exp
  cartId: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: user_bool_exp
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "userCart"
"""
enum userCart_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  userCart_pkey
}

"""
input type for inserting data into table "userCart"
"""
input userCart_insert_input {
  cart: cart_obj_rel_insert_input
  cartId: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user: user_obj_rel_insert_input
  userId: String
}

"""aggregate max on columns"""
type userCart_max_fields {
  cartId: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  userId: String
}

"""
order by max() on columns of table "userCart"
"""
input userCart_max_order_by {
  cartId: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  userId: order_by
}

"""aggregate min on columns"""
type userCart_min_fields {
  cartId: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  userId: String
}

"""
order by min() on columns of table "userCart"
"""
input userCart_min_order_by {
  cartId: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  userId: order_by
}

"""
response of any mutation on the table "userCart"
"""
type userCart_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [userCart!]!
}

"""
on_conflict condition type for table "userCart"
"""
input userCart_on_conflict {
  constraint: userCart_constraint!
  update_columns: [userCart_update_column!]! = []
  where: userCart_bool_exp
}

"""Ordering options when selecting data from "userCart"."""
input userCart_order_by {
  cart: cart_order_by
  cartId: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user: user_order_by
  userId: order_by
}

"""primary key columns input for table: userCart"""
input userCart_pk_columns_input {
  id: uuid!
}

"""
select columns of table "userCart"
"""
enum userCart_select_column {
  """column name"""
  cartId

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  userId
}

"""
input type for updating data in table "userCart"
"""
input userCart_set_input {
  cartId: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  userId: String
}

"""
Streaming cursor of the table "userCart"
"""
input userCart_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: userCart_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input userCart_stream_cursor_value_input {
  cartId: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  userId: String
}

"""
update columns of table "userCart"
"""
enum userCart_update_column {
  """column name"""
  cartId

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  userId
}

input userCart_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: userCart_set_input

  """filter the rows which have to be updated"""
  where: userCart_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

